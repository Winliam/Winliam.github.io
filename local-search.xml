<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSAPP并发编程总结</title>
    <link href="/2021/07/09/CSAPP%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/09/CSAPP%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="并发编程基本概念"><a href="#并发编程基本概念" class="headerlink" title="并发编程基本概念"></a>并发编程基本概念</h2><ul><li><strong>并发</strong>：多个逻辑控制流的生命中周期有重叠，即称为<strong>并发现象</strong>(concurrency)</li><li><strong>并行</strong>：发生在多核/多计算机上的并发现象（在一个时刻上存在多个逻辑控制流），称为<strong>并行现象</strong>（parallel），是并发现象的真子集；</li></ul><h2 id="并发程序的三种构造方式："><a href="#并发程序的三种构造方式：" class="headerlink" title="并发程序的三种构造方式："></a>并发程序的三种构造方式：</h2><ul><li><strong>进程</strong>：每个逻辑控制流实现为一个进程<ul><li>特点：独立的虚拟地址空间</li><li>优点：独立则不易混淆</li><li>缺点：<ul><li>独立则难以共享数据</li><li>进程context切换和IPC开销高，所以往往比较慢（ 进程间通信机制）</li></ul></li></ul></li><li><strong>I/O多路复用</strong>：状态机化，逻辑控制流的切换实现为状态机的状态切换。具体原理看<a href="https://www.zhihu.com/question/32163005/answer/55772739">这个</a><ul><li>优点：共享数据容易，并且没有进程context切换的开销</li><li>缺点：编码复杂，不能充分利用多核处理器</li></ul></li><li><strong>线程</strong>：重点，下面展开讲。</li></ul><h2 id="线程基本概念："><a href="#线程基本概念：" class="headerlink" title="线程基本概念："></a>线程基本概念：</h2><ul><li><strong>主线程</strong>：进程中第一个运行的线程</li><li><strong>对等线程</strong>：进程中后来运行的线程</li><li><strong>与进程的区别</strong>：<ul><li>上下文内容少，切换更快，开销更少，具体包括：线程ID、栈和栈指针、PC、条件码、register value</li><li>一个进程的所有线程（对等线程池）彼此之间没有层次结构，都是对等的；</li><li>对等线程之间共享进程的虚拟地址空间，可以等待另外一个对等线程终止或主动杀死它</li></ul></li><li><strong>共享变量</strong>：一个变量的一个实例被不止一个线程引用，那么这个变量称为共享变量</li><li><strong>线程安全的函数</strong>：被多个并发线程反复调用时能够一直产生正确结果的函数称为线程安全函数</li><li><strong>可重入函数</strong>：线程安全函数的一个真子集，指不会引入任何共享数据的函数<ul><li><strong>显式可重入</strong>：传参均为值传递（且非指针值传递），而且所有数据引用的都是本地自动栈变量</li><li><strong>隐式可重入</strong>：在显式的基础上取消“值传递（且非指针值传递）”的限制，允许指针值传递和引用传递，但是传递的变量都是非共享变量时，该函数是隐式可重入的</li></ul></li><li><strong>竞争</strong>：程序的正确性依赖于某条/某些特定的轨迹线，或者说不是全部的轨迹线都能让程序正确执行，哪怕是那些绕过了互斥锁禁止区的全部轨迹线也不行。（具体例子见CSAPP P719）</li></ul><h2 id="Posix线程模型："><a href="#Posix线程模型：" class="headerlink" title="Posix线程模型："></a>Posix线程模型：</h2><p>管理Linux线程的C语言接口包&lt;pthread.h&gt;，包含大约60个函数。</p><ul><li><strong>线程例程概念</strong>：接受和返回一个void指针的函数类型，其内容为函数真正要做的事。若输入输出的参数较多，应封装为一个结构体。</li><li><strong>常用的pthread函数</strong>：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*创建线程*/</span><br>int pthread_creat(&amp;tid, NULL, thread, NULL)<br><span class="hljs-regexp">//</span>(返回线程ID，设置线程属性(高阶内容)，线程例程函数名，线程例程函数的传参)，成功返回<span class="hljs-number">0</span>，否则非<span class="hljs-number">0</span><br><br><span class="hljs-regexp">/*终止线程*/</span><br><span class="hljs-regexp">//</span>某个对等线程的例程函数执行完毕，该线程会隐式终止<br><span class="hljs-regexp">//</span>某个对等线程调用pthread_exit函数，线程会显式终止，而且如果是主线程调用，它会等待所有其他对等线程终止后再终止（进程也被终止了）<br>void pthread_exit(void *thread_return) <span class="hljs-regexp">//</span>函数不返回（因为逻辑控制流都结束了啊），会将一些信息写到thread_return中<br><span class="hljs-regexp">//</span>某个对等线程调用系统<span class="hljs-keyword">exit</span>函数，终止其所属进程及该进程所有的线程<br><span class="hljs-regexp">//</span>某个对等线程调用pthread_cancel函数，终止另一个对等线程<br>int pthread_cancel(pthread_t tid)  <span class="hljs-regexp">//</span>终止线程ID为tid的对等线程，成功返回<span class="hljs-number">0</span>，否则非<span class="hljs-number">0</span><br><br><span class="hljs-regexp">/*回收已终止线程的资源*/</span><br>int pthread_join(pthread_t tid, void**thread_return) <span class="hljs-regexp">//</span>调用该函数的对等线程阻塞，等待线程ID为tid的对等线程结束，然后回收其资源后返回<br><br><span class="hljs-regexp">/*分离线程*/</span><br><span class="hljs-regexp">//</span>一个线程的状态要么是detached要么是joinable，处于后者时意味着可以被其他线程杀死和回收资源，前者不可（自行终止，系统回收资源）<br>int pthread_detach(pthread_t tid)  <span class="hljs-regexp">//</span>调用该函数的对等线程将线程ID为tid的线程分离<br><br><span class="hljs-regexp">/*获取自身ID*/</span><br>pthread_t pthread_self();<br></code></pre></td></tr></table></figure></li></ul><h2 id="线程的内存模型（两个关键问题）"><a href="#线程的内存模型（两个关键问题）" class="headerlink" title="线程的内存模型（两个关键问题）"></a>线程的内存模型（两个关键问题）</h2><ul><li><strong>线程的内存模型是怎样的？</strong>——不是整齐清楚的。。。</li><li><strong>变量的实例如何映射到线程的内存模型中？</strong><ul><li>全局变量+局部的静态变量：一个进程中只有一个实例，任何线程均可引用；</li><li>局部的自动变量：多个实例，由各个线程栈自行管理。</li></ul></li></ul><h2 id="线程共享变量的冲突问题"><a href="#线程共享变量的冲突问题" class="headerlink" title="线程共享变量的冲突问题"></a>线程共享变量的冲突问题</h2><p>（关键字：进度图-&gt;信号量-&gt;PV操作-&gt;互斥锁-&gt;互斥锁加/解锁-&gt;死锁）</p><ul><li><strong>进度图</strong>：注意把P/V操作放到线段上，状态放到端点上，这样端点的状态即可解释为执行P/V操作前或者P/V操作后</li><li><strong>信号量s：一个非负整数全局变量</strong></li><li><strong>PV操作</strong>（原子操作）：<ul><li>P(s)操作：检查s是否为0；<ul><li>是，则调用该函数的线程在此处阻塞；</li><li>否，则将s减1后继续向下执行；</li></ul></li><li>V(s)操作：先将s加1，然后检查有么有因为P(s)阻塞的线程，如有则将完成其P操作，然后置为就绪状态（等待调度），若没有那就没有。。若有不止一个，就随机选择一个，反正只能一个（因为要完成P操作啊）</li></ul></li><li><strong>互斥锁</strong>：二元的信号量</li><li><strong>互斥锁加/解锁</strong>：针对二元信号量的P/V操作</li><li><strong>死锁</strong>：<br>禁止区外存在这样一些状态点，既不能向右，也不能向上，因为向上会进入线程A的禁止区，向右会进入线程B的禁止区。<br><br>通过以下原则来防止死锁：<br>给定所有互斥操作的一个全序( 全序概念)，如果每个线程都是以该全序获得互斥锁并以相反的顺序（不是说全序的逆序，而是线程A和线程B释放的顺序相反）释放，那么这个程序就不会出现死锁。（但是该原则现在看下来只适用于两个线程，更多的线程就要用到更复杂的银行家算法了）<br><br>例如：<br><ul><li>线程1： P(s) -&gt; P(t) -&gt; V(t) -&gt; V(s)；<ul><li>线程2： P(s) -&gt; P(t) -&gt; V(s) -&gt; V(t);</li></ul></li></ul></li></ul><h2 id="并行程序的性能量化（暂时略过）"><a href="#并行程序的性能量化（暂时略过）" class="headerlink" title="并行程序的性能量化（暂时略过）"></a>并行程序的性能量化（暂时略过）</h2><h2 id="信号量用于共享资源调度（暂时略过）"><a href="#信号量用于共享资源调度（暂时略过）" class="headerlink" title="信号量用于共享资源调度（暂时略过）"></a>信号量用于共享资源调度（暂时略过）</h2>]]></content>
    
    
    <categories>
      
      <category>工作技能</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/2021/07/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/07/08/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于强迫症患者，非要自定义域名的话，先提前注册好域名，推荐阿里云，审核快。不限下面的流程会阻塞。。。</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ol><li>去官网 <a href="https://nodejs.org/">https://nodejs.org</a> 查看最新版本号</li><li>根据最新版本号添加源，然后安装<blockquote><p>curl -sL <a href="https://deb.nodesource.com/setup_10.x">https://deb.nodesource.com/setup_10.x</a> | sudo -E bash<br>sudo apt-get install -y nodejs<br></p></blockquote></li><li>查看版本，确认安装成功<blockquote><p>node -v<br>npm -v</p></blockquote></li></ol><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>上交公钥，然后设置用户名+邮箱</p><blockquote><p>git config –global user.name “William_2580”<br>git config –global user.email “<a href="mailto:&#x31;&#54;&#x31;&#49;&#x31;&#51;&#52;&#57;&#x37;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;">&#x31;&#54;&#x31;&#49;&#x31;&#51;&#52;&#57;&#x37;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a>“</p></blockquote><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><blockquote><p>npm install -g hexo-cli</p></blockquote><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><blockquote><p>mkdir hexoblog<br>hexo init hexoblog<br>hexo server<br>然后浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a>, 即可看到部署在本地的个人网站</p></blockquote><h2 id="云端部署"><a href="#云端部署" class="headerlink" title="云端部署"></a>云端部署</h2><ol><li>github创建repo，名称必须为：Winliam.github.io</li><li>安装hexo部署工具：<blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li>修改hexoblog下的_config.yml中的deploy段：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">type: git<br>repo: git@github<span class="hljs-selector-class">.com</span>:Winliam/Winliam<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br>branch: main<br></code></pre></td></tr></table></figure></li><li>部署：<blockquote><p>hexo d //public文件夹下的内容被推送到刚才创建的repo中</p></blockquote></li><li>然后进入repo的setting-&gt;pages页面选择正确的分支后，即可通过Winliam.github.io访问blog了</li></ol><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol><li>阿里云域名注册购买</li><li>买到后阿里云中继续设置域名解析，完成后等待10min等DNS生效(使得<a href="http://www.guohongming.xyz和guohongming.xyz都可以被访问到/">www.guohongming.xyz和guohongming.xyz都可以被访问到</a>)</li><li>在本地public文件夹添加CNAME文件(内容为guohongming.xyz)后重新部署一次</li><li>在云端repo的setting-&gt;pages页面将guohongming.xyz添加到Custom domain并保存，不用管warning</li></ol><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>电脑设置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown-ize vim</title>
    <link href="/2021/07/08/markdown-ize-vim/"/>
    <url>/2021/07/08/markdown-ize-vim/</url>
    
    <content type="html"><![CDATA[<h1 id="安装neovim"><a href="#安装neovim" class="headerlink" title="安装neovim"></a>安装neovim</h1><blockquote><p>sudo apt-get install neovim<br>neovim<br>:checkhealth</p></blockquote><h1 id="安装vim插件管理器vim-plug"><a href="#安装vim插件管理器vim-plug" class="headerlink" title="安装vim插件管理器vim-plug"></a>安装vim插件管理器vim-plug</h1><blockquote><p>sh -c ‘curl -fLo “${XDG_DATA_HOME:-$HOME/.local/share}”/nvim/site/autoload/plug.vim –create-dirs<br><a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;</a></p></blockquote><p>链接不上的话，需要：<br></p><blockquote><p>sudo nvim /etc/hosts<br></p></blockquote><p>添加一行：<br></p><blockquote><p>199.232.96.133 raw.githubusercontent.com<br></p></blockquote><p>其中的ip地址来自于<em><a href="https://githubusercontent.com.ipaddress.com/raw.githubusercontent.com">https://githubusercontent.com.ipaddress.com/raw.githubusercontent.com</a></em></p><h1 id="创建neovim配置文件init-vim"><a href="#创建neovim配置文件init-vim" class="headerlink" title="创建neovim配置文件init.vim"></a>创建neovim配置文件init.vim</h1><blockquote><p>mkdir .config/nvim<br>touch .config/nvim/init.vim</p></blockquote><h1 id="修改init-vim以添加插件"><a href="#修改init-vim以添加插件" class="headerlink" title="修改init.vim以添加插件"></a>修改init.vim以添加插件</h1><p>目录，markdown，preview一共三个暂时（修改的内容直接看文件）,<br>中间: </p><ul><li>遇到了自动折叠问题：修改配置文件解决  </li><li>又遇到了无法预览的问题，看github<a href="https://github.com/iamcco/markdown-preview.nvim/issues/120">作者回复</a>解决</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/07/hello-world/"/>
    <url>/2021/07/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
